{
  "program": {
    "description": "A powerful devkit for scaffolding new projects.",
    "initialized": "CLI initialized successfully."
  },
  "new": {
    "command": {
      "description": "Create a new project from a template"
    },
    "project": {
      "language": {
        "argument": "The programming language of the template (e.g., 'react', 'node')"
      },
      "name": {
        "argument": "The name of your new project"
      },
      "template": {
        "option": {
          "description": "The name of the template to use (e.g., 'ts', 'simple-api')"
        }
      },
      "scaffolding": "Scaffolding project '{projectName}' with the '{template}' template...",
      "success": "‚úÖ Project '{projectName}' created successfully!",
      "fail": "‚ùå Failed to scaffold project: {error}"
    }
  },
  "list": {
    "command": {
      "description": "List all available templates in the configuration.",
      "language": {
        "argument": "The language to filter templates by"
      }
    },
    "templates": {
      "loading": "Loading templates...",
      "not_found": "No templates found in the configuration file.",
      "header": "Available Templates:"
    }
  },
  "remove_template": {
    "command": {
      "description": "Remove a template from the configuration."
    },
    "start": "Removing template from configuration...",
    "success": "‚úÖ Template '{templateName}' for '{language}' removed successfully!",
    "language": {
      "argument": "The programming language of the template to remove."
    },
    "name": {
      "argument": "The name or alias of the template to remove."
    },
    "option": {
      "global": "Remove the template from the global configuration instead of the local one."
    }
  },
  "version": {
    "description": "Output the current version of the CLI."
  },
  "help": {
    "description": "Display help for a command."
  },
  "scaffolding": {
    "project": {
      "start": "Scaffolding {language} project: {project}",
      "success": "‚úÖ {language} project '{project}' created successfully!",
      "fail": "‚ùå Failed to scaffold {language} project: {error}"
    },
    "copy": {
      "start": "üìÇ Coping local template files...",
      "success": "‚úÖ Local template copied successfully!",
      "fail": "‚ùå Failed to copy local template."
    },
    "run": {
      "start": "üì¶ Running official CLI command: {command}...",
      "success": "‚úÖ Official CLI command ran successfully!",
      "fail": "‚ùå Failed to run official CLI command."
    },
    "install": {
      "start": "üì¶ Installing dependencies with {pm}...",
      "success": "‚úÖ Dependencies installed successfully!",
      "fail": "‚ùå Failed to install dependencies."
    },
    "complete": {
      "success": "\nüöÄ Project created successfully! üéâ",
      "next_steps": "\n| Next steps:\n"
    }
  },
  "config": {
    "command": {
      "description": "Manage DevKit settings"
    },
    "set": {
      "command": {
        "description": "Set one or more configuration values. \n\nAvailable keys:\n  pm, packageManager      - Sets the default package manager to use for new projects.\n                          Possible values: {pmValues}\n  cache, cacheStrategy    - Sets the global caching behavior for remote templates.\n                          Possible values: 'always-refresh', 'never-refresh', 'daily'\n  language, lg            - Sets the language of the CLI. Possible values: 'en', 'fr'\n"
      },
      "argument": {
        "description": "A list of key-value pairs to set (e.g., 'pm npm language fr')"
      },
      "option": {
        "global": "Update the global configuration instead of the local one."
      },
      "updating": "Updating configuration...",
      "success": "Configuration updated successfully."
    },
    "init": {
      "command": {
        "description": "Initializes a configuration file with default settings."
      },
      "start": "Initializing config...",
      "success": "Configuration file created successfully!",
      "fail": "Failed to initialize config.",
      "initializing": "Initializing configuration...",
      "option": {
        "local": "Initialize a local configuration file instead of a global one.",
        "global": "Initialize a global configuration file instead of a local one."
      },
      "confirm_overwrite": "Config file already exists at {path}. Do you want to overwrite it?",
      "aborted": "Operation aborted. No changes were made."
    },
    "update": {
      "command": {
        "description": "Update properties of a template, such as its alias, description, or location."
      },
      "language": {
        "argument": "The programming language of the template to update."
      },
      "template": {
        "argument": "The name or alias of the template to update."
      },
      "option": {
        "new_name": "A new name for the template.",
        "description": "A new brief description for the template.",
        "alias": "A new alias for the template.",
        "location": "A new location for the template.",
        "cache_strategy": "A new cache strategy for the template.",
        "package_manager": "A new package manager for the template.",
        "global": "Update the template in the global configuration instead of the local one."
      },
      "updating": "Updating template '{templateName}' in configuration...",
      "success": "‚úÖ Template '{templateName}' updated successfully!",
      "success_name": "‚úÖ Template '{oldName}' updated to '{newName}' successfully!"
    },
    "cache": {
      "command": {
        "description": "Update the cache strategy for a specific template.",
        "start": "Updating cache strategy for template '{template}'...",
        "fail": "‚ùå Failed to update cache strategy for template '{template}'.",
        "success": "‚ú® Cache strategy for template '{template}' updated to '{strategy}'."
      },
      "template": {
        "argument": "The name of the template to update"
      },
      "strategy": {
        "argument": "The new cache strategy"
      },
      "start": "Updating cache strategy for template '{template}'...",
      "success": "Cache strategy for template '{template}' updated to '{strategy}'",
      "fail": "Failed to update cache strategy for template '{template}'",
      "updating": "Updating cache..."
    },
    "check": {
      "local": "Checking for local or monorepo configuration...",
      "global": "Local config not found. Checking for global configuration..."
    },
    "found": {
      "local": "Found and using local configuration at {path}.",
      "global": "No local config found. Using global configuration at {path}."
    },
    "not": {
      "found": {
        "default": "No configuration file found. Using default settings."
      }
    }
  },
  "error": {
    "invalid": {
      "key": "Invalid key: '{key}'. Valid keys are: {keys}",
      "value": "Invalid value for {key}. Valid options are: {options}",
      "command": "Invalid command in configuration: '{command}'",
      "cache_strategy": "Invalid cache strategy: '{value}'. Valid options are: {options}",
      "package_manager": "Invalid package manager: '{value}'. Valid options are: {options}",
      "remove_required": "Cannot remove a required property: '{key}'."
    },
    "config": {
      "parse": "Failed to parse {file}. Using default configuration.",
      "save": "‚ùå Failed to save configuration file: {file}",
      "exists": "File already exists at {path}. Use 'config set' to update it.",
      "not": {
        "found": "Configuration file not found."
      },
      "global": {
        "not": {
          "found": "Global configuration file not found. Run 'devkit config init --global' to create one."
        }
      },
      "local": {
        "not": {
          "found": "No local configuration file found. Run 'devkit config init --local' to create one."
        }
      },
      "generic": "Configuration error",
      "init": {
        "fail": "Failed to initialize configuration.",
        "local_and_global": "Cannot use both --local and --global flags at the same time."
      },
      "read": "Failed to read configuration at {path}.",
      "no_file_found": "No configuration file found. Run 'devkit config init' to create a global one, or 'devkit config init --local' to create a local one.",
      "no_file_found_local": "No local configuration file found. Run 'devkit config init --local' to create one."
    },
    "file": {
      "not_found": "Could not find file '{fileName}'."
    },
    "package": {
      "root": {
        "not_found": "Could not find project root containing package.json."
      },
      "file_not_found": "{file} not found at {path}",
      "failed_to_update_project_name": "Failed to update project name:"
    },
    "version": {
      "read_fail": "Failed to read package.json version."
    },
    "template": {
      "not_found": "Template '{template}' not found in configuration.",
      "exists": "Template '{template}' already exists in the configuration. Use 'devkit config set' to update it."
    },
    "alias": {
      "exists": "Alias '{alias}' already exists for another template in this language. Please choose a different alias."
    },
    "install": {
      "message": "Installation error:"
    },
    "scaffolding": {
      "unexpected": "An unexpected error occurred during scaffolding.",
      "language": {
        "not_found": "Scaffolding language not found in configuration: '{language}'"
      }
    },
    "command": {
      "config": {
        "cache": {
          "fail": "Failed to update cache strategy for template '{template}'"
        }
      },
      "set": {
        "invalid_arguments_count": "Invalid number of arguments. Please provide key-value pairs."
      }
    },
    "save": {
      "local": {
        "config": {
          "not_found": "Failed to save local configuration. File not found at '{path}'."
        }
      }
    },
    "git": {
      "generic": "Git error"
    },
    "unexpected": "An unexpected error occurred",
    "unknown": "An unknown error occurred",
    "language_config_not_found": "Scaffolding language not found in configuration: '{language}'"
  },
  "cache": {
    "clone": {
      "start": "‚ú® Cloning new template from {url}...",
      "success": "‚úÖ Template cloned successfully!",
      "fail": "‚ùå Failed to clone repository."
    },
    "refresh": {
      "start": "üîÑ Refreshing cached template...",
      "success": "‚úÖ Template refreshed successfully!",
      "fail": "‚ùå Failed to refresh template."
    },
    "use": {
      "info": "üöÄ Using cached template for {repoName}."
    },
    "copy": {
      "start": "üìÇ Coping cached template to project directory...",
      "success": "‚úÖ Files copied successfully!",
      "fail": "‚ùå Failed to copy files from cache."
    }
  },
  "warning": {
    "no": {
      "local": {
        "config": "No local project configuration found. Using global or default settings."
      }
    },
    "global": {
      "config": {
        "not": {
          "initialized": "Global configuration not initialized. Run 'devkit config init' to create one."
        }
      }
    },
    "no_config_found": "‚ö†Ô∏è No configuration file found. Using default settings."
  },
  "cli": {
    "add_template": {
      "description": "Add a new template to the configuration",
      "options": {
        "description": "A brief description of the template",
        "alias": "A short alias for the template",
        "cache": "The cache strategy for the template",
        "package_manager": "The package manager to use for the template"
      },
      "adding": "Adding template '{templateName}' to configuration...",
      "success": "Template '{templateName}' added successfully!"
    }
  }
}
